# 12. Disarium Number
original = (n := int(input("Enter a Number: ")))
reversed_num = 0
while n > 0:
    reversed_num = reversed_num * 10 + n % 10
    n //= 10

i, disarium_sum = 1, 0
while reversed_num > 0:
    disarium_sum += (reversed_num % 10) ** i
    reversed_num //= 10
    i += 1

if original == disarium_sum:
    print("Disarium Number")
else:
    print("Not a Disarium Number")

# 13. Harshad Number
original = (n := int(input("Enter a Number: ")))
digit_sum = 0
while n > 0:
    digit_sum += n % 10
    n //= 10

if original % digit_sum == 0:
    print("Harshad Number")
else:
    print("Not a Harshad Number")

# 14. Armstrong Numbers from 1 to 1000
print("Armstrong Numbers from 1 to 1000:")
for num in range(1, 1001):
    temp, digits = num, 0
    while temp > 0:
        digits += 1
        temp //= 10

    temp, armstrong_sum = num, 0
    while temp > 0:
        armstrong_sum += (temp % 10) ** digits
        temp //= 10

    if num == armstrong_sum:
        print(num)

# 15. Value of X^n
base = int(input("Enter Base (X): "))
exponent = int(input("Enter Exponent (n): "))
print(f"Answer: {base ** exponent}")

# 16. Value of nCr
def factorial(n):
    return 1 if n == 0 or n == 1 else n * factorial(n - 1)

n = int(input("Enter n for nCr: "))
r = int(input("Enter r for nCr: "))
nCr = factorial(n) // (factorial(r) * factorial(n - r))
print(f"{n}C{r}: {nCr}")

# 17. Sum of Digits in the Entered Number
num = int(input("Enter a Number: "))
digit_sum = 0
while num > 0:
    digit_sum += num % 10
    num //= 10
print(f"Sum of Digits: {digit_sum}")
